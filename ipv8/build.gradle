apply plugin: 'kotlin'

apply plugin: 'java-library'

apply plugin: 'jacoco'

apply plugin: 'org.jetbrains.dokka'

apply plugin: 'org.jlleitschuh.gradle.ktlint'

apply plugin: 'com.squareup.sqldelight'

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

sqldelight {
    Database {
        packageName = "nl.tudelft.ipv8.sqldelight"
        sourceFolders = ["sqldelight"]
        schemaOutputDirectory = file("src/main/sqldelight/databases")
    }
}

ktlint {
    version = "$ktlint_version"
    android = true
    outputToConsole = true
    ignoreFailures = true
    filter {
        // https://github.com/JLLeitschuh/ktlint-gradle/issues/97
        exclude {"**/generated/**"}
        // https://github.com/JLLeitschuh/ktlint-gradle/issues/266
        exclude { element -> element.file.path.contains("generated/") }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
    }

    // TODO: exclude generated files
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(
                dir: it,
                exclude: ["**/sqldelight/**"]
            )
        }))
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    // Network utils
    implementation 'commons-net:commons-net:3.6'

    // Crypto
    implementation "com.goterl.lazycode:lazysodium-java:4.2.4"

    // Logging
    implementation 'io.github.microutils:kotlin-logging:1.7.7'

    // Testing
    testImplementation 'junit:junit:4.12'
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "com.squareup.sqldelight:sqlite-driver:$sqldelight_version"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += [
        "-Xuse-experimental=kotlin.Experimental,kotlin.ExperimentalUnsignedTypes",
        "-Werror" // Set Kotlin compiler warnings as errors
    ]
}
